

(define empty?
  (lambda (x)
     (eq? '() x)))

(define list?
  (lambda (x)
      (if(empty? x)
         #t
         (if (pair? x)
            (if(list? (cdr x))
               #t
               #f )
            #f ))))

(define equal-list?
  (lambda (x y)
    (if(list? x)
       (if(list? y)
          (if(empty? x)
             (empty? y)
             (if(empty? y)
                #f
                (if(list? (car x))
                   (if(list? (car y))
                      (equal-list? (car x) (car y))
                      #f )
                   (if(eq? (car x) (car y))
                      (if(list? (cdr x))
                         (if(list? (cdr y))
                            (equal-list? (cdr x) (cdr y))
                            #f )
                         (if(eq? (cdr x) (cdr y))
                            #t
                            #f ))
                      #f ))))
          #f )
       #f)))

(define append
  (lambda (x y)
    (if(empty? x)
       y
       (cons (car x) (append(cdr x) y)))))

(define append3
  (lambda (x y n)
    (append (append x y) (cons n '()))))

(define pascal
  (lambda (n)
    (if(= n 1)
       (cons 1 '())
       (cons 1 (addRow(pascal (- n 1)))))))

(define addRow
  (lambda (lst)
    (if(empty? lst)
       '()
       (if(empty? (cdr lst))
          (cons 1 '())
          (cons (+ (car lst) (cadr lst)) (addRow(cdr lst)))))))
